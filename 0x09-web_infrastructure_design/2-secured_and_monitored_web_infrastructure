## Task 2: Secured and Monitored Web Infrastructure
---

### Diagram
https://imgbox.com/U0hdM0dW

---

## Description

- **3 Web Servers**  
  - Serve the website content and are load-balanced to ensure high availability.

- **3 Firewalls**  
  - One per critical layer (load balancer, application server, database).  
  - Enforce strict access rules (e.g., database only accepts connections from application servers).

- **1 Load Balancer with SSL Termination**  
  - Distributes traffic across the web servers.  
  - Handles SSL termination to provide HTTPS access.  
  - SSL certificate installed for secure connections to `www.foobar.com`.

- **1 MySQL Database Server**  
  - Stores all persistent data.  
  - Currently configured to accept writes only on a single node (introduces risk).

- **Monitoring Clients (e.g., Sumo Logic, Prometheus)**  
  - Installed on each server to collect metrics, logs, and performance data.  
  - Monitor traffic patterns, system performance, and potential issues.

---

## Purpose of Each Addition

- **Firewalls**: Restrict inbound and outbound network traffic, preventing unauthorized access.  
- **SSL Certificate**: Encrypts user traffic via HTTPS, securing data in transit.  
- **Monitoring Clients**: Provide real-time insights into server health and performance, enabling quick issue detection.

---

## Monitoring Details

- **Goals**:  
  - Identify downtime, slowdowns, and performance bottlenecks.  
  - Gather data for capacity planning and optimization.

- **Data Collection**:  
  - Lightweight monitoring agents run on each server, collecting CPU, memory, network usage, request counts, and error rates.  
  - Data is sent to a central monitoring platform (e.g., Sumo Logic, Prometheus, Grafana).

- **Tracking QPS (Queries Per Second)**:  
  - Enable MySQL Performance Schema.  
  - Review slow query logs.  
  - Monitor application logs for query counts.

---

## Potential Issues & Solutions

### 1. SSL Termination at Load Balancer
- **Issue**: Traffic between the load balancer and web servers is unencrypted.  
- **Mitigation**: Use SSL passthrough or implement TLS between the load balancer and backend servers.

### 2. Single Write-Capable MySQL Server
- **Issue**: Creates a single point of failure and limits scalability.  
- **Mitigation**: Use primary-primary replication or promote a read replica when the primary fails.

### 3. All-in-One Server Roles
- **Issue**: Running database, web server, and application server on the same machine limits scalability, isolates poorly, and complicates maintenance.  
- **Mitigation**: Separate each role onto dedicated servers or use containerized services.
