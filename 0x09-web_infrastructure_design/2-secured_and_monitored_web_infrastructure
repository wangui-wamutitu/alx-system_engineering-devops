## Task 2: Secured and Monitored Web Infrastructure

### ![Task 2 Diagram](https://imgbox.com/U0hdM0dW)

### Description:

- **3 Web Servers**:
  - Hosting the site and load-balanced for high availability.
- **3 Firewalls**:
  - Protect each layer: Load balancer, application server, and database.
  - Restrict access (e.g., DB only allows traffic from app servers).
- **1 Load Balancer with SSL Termination**:
  - Terminates SSL to serve HTTPS traffic.
  - SSL Certificate installed for encrypted traffic to `www.foobar.com`.
- **1 MySQL Database Server**:
  - Handles all data storage, but write-only capable (a risk).
- **Monitoring Clients (e.g., SumoLogic, Prometheus)**:
  - Installed on each server to collect metrics and logs.
  - Tracks traffic, server performance, and anomalies.

---

## Additions

### Why Add Each Element?

- **Firewalls**: Control inbound/outbound traffic; prevent unauthorized access.
- **SSL Certificate**: Encrypts traffic (HTTPS); secures user data in transit.
- **Monitoring Clients**: Real-time alerts and analysis of server health.

---

## Monitoring

- **Purpose**:
  - Detect downtime or performance issues.
  - Analyze trends and logs for system tuning.
- **Collection Method**:
  - Monitoring agents run as daemons, collecting CPU, memory, network, QPS, etc., and sending data to a monitoring server (e.g., SumoLogic).
- **To Monitor QPS (Queries Per Second)**:
  - Configure your monitoring agent to track SQL queries via:
    - MySQL slow logs
    - Performance Schema
    - Application logs

---

## Infrastructure Issues

### SSL Termination at Load Balancer
- Problem:
  - Traffic between the load balancer and web servers is unencrypted.
- Fix:
  - Enable end-to-end encryption (SSL passthrough or mutual TLS).

### Single Write-Capable MySQL Server
- Problem:
  - Single point of failure; limits scalability.
- Fix:
  - Use master-master replication or promote a read replica when the master fails.

### All-in-One Servers (App, DB, Web)
- Problem:
  - No separation of concerns.
  - Harder to scale and manage.
  - Poor fault isolation.
- Fix:
  - Use dedicated roles for each server (microservices or containerization).

---