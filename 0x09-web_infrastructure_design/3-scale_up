# Scale Up Infrastructure Design

## Overview
This setup scales the previous 3-server infrastructure into a **4-server high-availability architecture** by:
1. Adding a **second load balancer** for redundancy.
2. Splitting the **Web Server**, **Application Server**, and **Database Server** into **dedicated machines**.

---

## Infrastructure Components

### 1. Load Balancer Cluster (HAProxy)
- **Quantity**: 2 (LB1 Active, LB2 Passive)
- **Purpose**:  
  - Ensures high availability — if LB1 fails, LB2 automatically takes over.
  - Prevents single point of failure (SPOF) at the entry point.
- **Configuration**:
  - HAProxy for load balancing.
  - `keepalived` or VRRP for failover Virtual IP.
- **Cluster Type**: **Active-Passive** — one active, one standby.

---

### 2. Web Server (Nginx)
- **Role**:
  - Serves static files (HTML, CSS, JS, images).
  - Forwards dynamic requests to the application server.
- **Reason for Separation**:
  - Improves performance by offloading static content.
  - Can scale independently from the application logic.
- **Security**:
  - Accepts connections **only from Load Balancers**.

---

### 3. Application Server (Gunicorn/uWSGI + Django)
- **Role**:
  - Handles backend logic and dynamic content.
  - Communicates with the database server.
- **Reason for Separation**:
  - Isolates CPU-intensive application logic from web serving tasks.
  - Allows independent scaling of application processes.
- **Security**:
  - Accepts connections **only from the Web Server**.

---

### 4. Database Server (MySQL)
- **Role**:
  - Stores and manages persistent application data.
- **Reason for Separation**:
  - Dedicated resources for database queries.
  - Enhanced security and easier tuning for DB performance.
- **Security**:
  - MySQL port (3306) open **only to the Application Server**.

---

## Request Flow
1. **User** requests `www.foobar.com`.
2. **DNS** resolves to the **Virtual IP** of the Load Balancer cluster.
3. **Active Load Balancer** routes the request to the **Web Server**.
4. **Web Server**:
   - Serves static content directly, or
   - Forwards dynamic requests to the **Application Server**.
5. **Application Server** processes the request and queries the **Database Server** if needed.
6. **Response** is sent back through the same chain to the user.

---

## Why Add These Elements?
- **Extra Load Balancer**: Eliminates SPOF at entry.
- **Separate Web Server**: Better performance for static content.
- **Separate Application Server**: Dedicated processing power for backend logic.
- **Separate Database Server**: Optimized for data storage and queries.

---

## Diagram

https://imgbox.com/oMVZuSBp